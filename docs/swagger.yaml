definitions:
  common.Order:
    enum:
    - asc
    - desc
    type: string
    x-enum-varnames:
    - Asc
    - Desc
  dto.CreateBlogDto:
    properties:
      content:
        type: string
      image:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/enums.BlogStatus'
        enum:
        - PUBLISHED
        - UNPUBLISHED
      title:
        type: string
      userId:
        type: string
    required:
    - content
    - title
    - userId
    type: object
  dto.CreateUserDto:
    properties:
      active:
        type: boolean
      email:
        type: string
      image:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UpdateBlogDto:
    properties:
      content:
        type: string
      image:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/enums.BlogStatus'
        enum:
        - PUBLISHED
        - UNPUBLISHED
      title:
        type: string
    type: object
  dto.UpdateUserDto:
    properties:
      active:
        type: boolean
      image:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    type: object
  enums.BlogStatus:
    enum:
    - PUBLISHED
    - UNPUBLISHED
    type: string
    x-enum-varnames:
    - Published
    - Unpublished
info:
  contact: {}
paths:
  /blog/:
    get:
      consumes:
      - application/json
      parameters:
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: page
        type: integer
      - in: query
        name: search
        type: string
      - in: query
        name: size
        type: integer
      - in: query
        name: sort
        type: string
      - in: query
        name: userId
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get all blog
      tags:
      - Blog
    post:
      consumes:
      - application/json
      parameters:
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBlogDto'
      produces:
      - application/json
      responses: {}
      summary: Create blog
      tags:
      - Blog
  /blog/{slug}/:
    get:
      consumes:
      - application/json
      parameters:
      - description: slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get a blog
      tags:
      - Blog
    patch:
      consumes:
      - application/json
      parameters:
      - description: slug
        in: path
        name: slug
        required: true
        type: string
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBlogDto'
      produces:
      - application/json
      responses: {}
      summary: Update blog
      tags:
      - Blog
  /user/:
    get:
      consumes:
      - application/json
      parameters:
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: page
        type: integer
      - in: query
        name: search
        type: string
      - in: query
        name: size
        type: integer
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get all user
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDto'
      produces:
      - application/json
      responses: {}
      summary: Create user
      tags:
      - User
  /user/{id}/:
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get a user
      tags:
      - User
    patch:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDto'
      produces:
      - application/json
      responses: {}
      summary: Update user
      tags:
      - User
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
